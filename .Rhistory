rbind(sim,true,diff,sd)
p = seq(.1,.9,.1)
sim = quantile(x, probs = p)
true = sapply(p,inv_cdf)
diff = sim - true
sd = sqrt(p*(1-p)/n*ddexp(x)^2)
n <- 10000
x = rdexp(n)
# check the density
ddexp = function(x){.5*exp(-abs(x))}
plot(density(x), ylim = c(0,.5))
vals = seq(-6,6,0.1)
lines(vals,ddexp(vals))
# check the quantiles
p = seq(.1,.9,.1)
sim = quantile(x, probs = p)
true = sapply(p,inv_cdf)
diff = sim - true
sd = sqrt(p*(1-p)/n*ddexp(x)^2)
rbind(sim,true,diff,sd)
sd = sqrt(p*(1-p)/n*ddexp(x)^2)
# check the quantiles
p = seq(.1,.9,.1)
sim = quantile(x, probs = p)
true = sapply(p,inv_cdf)
diff = sim - true
sd = sqrt(p*(1-p)/n*ddexp(true)^2)
rbind(sim,true,diff,sd)
n <- 100000
x = rdexp(n)
# check the density
ddexp = function(x){.5*exp(-abs(x))}
plot(density(x), ylim = c(0,.5))
vals = seq(-6,6,0.1)
lines(vals,ddexp(vals))
# check the quantiles
p = seq(.1,.9,.1)
sim = quantile(x, probs = p)
true = sapply(p,inv_cdf)
diff = sim - true
sd = sqrt(p*(1-p)/n*ddexp(true)^2)
rbind(sim,true,diff,sd)
n <- 100
x = rdexp(n)
# check the density
ddexp = function(x){.5*exp(-abs(x))}
plot(density(x), ylim = c(0,.5))
vals = seq(-6,6,0.1)
lines(vals,ddexp(vals))
# check the quantiles
p = seq(.1,.9,.1)
sim = quantile(x, probs = p)
true = sapply(p,inv_cdf)
diff = sim - true
sd = sqrt(p*(1-p)/n*ddexp(true)^2)
rbind(sim,true,diff,sd)
sqrt(.25*(1-.25)/1000*ddexp(inf_cdf(.25))^2)
sqrt(.25*(1-.25)/1000*ddexp(inv_cdf(.25))^2)
sqrt(.25*(1-.25)/(1000*ddexp(inv_cdf(.25))^2))
n <- 1000
x = rdexp(n)
# check the density
ddexp = function(x){.5*exp(-abs(x))}
plot(density(x), ylim = c(0,.5))
vals = seq(-6,6,0.1)
lines(vals,ddexp(vals))
# check the quantiles
p = seq(.1,.9,.1)
sim = quantile(x, probs = p)
true = sapply(p,inv_cdf)
diff = sim - true
sd = sqrt(p*(1-p)/(n*ddexp(true)^2))
rbind(sim,true,diff,sd)
n <- 1000
x = rdexp(n)
# check the density
ddexp = function(x){.5*exp(-abs(x))}
plot(density(x), ylim = c(0,.5))
vals = seq(-6,6,0.1)
lines(vals,ddexp(vals))
# check the quantiles
p = seq(.1,.9,.1)
sim = quantile(x, probs = p)
true = sapply(p,inv_cdf)
diff = sim - true
sd = sqrt(p*(1-p)/(n*ddexp(true)^2)) # standard deviation of quantiles
rbind(sim,true,diff,sd,diff/sd)
n <- 10000
x = rdexp(n)
# check the density
ddexp = function(x){.5*exp(-abs(x))}
plot(density(x), ylim = c(0,.5))
vals = seq(-6,6,0.1)
lines(vals,ddexp(vals))
# check the quantiles
p = seq(.1,.9,.1)
sim = quantile(x, probs = p)
true = sapply(p,inv_cdf)
diff = sim - true
sd = sqrt(p*(1-p)/(n*ddexp(true)^2)) # standard deviation of quantiles
rbind(sim,true,diff,sd,diff/sd)
n <- 1000
x = rdexp(n)
# check the density
ddexp = function(x){.5*exp(-abs(x))}
plot(density(x), ylim = c(0,.5))
vals = seq(-6,6,0.1)
lines(vals,ddexp(vals))
# check the quantiles
p = seq(.1,.9,.1)
sim = quantile(x, probs = p)
true = sapply(p,inv_cdf)
diff = sim - true
sd = sqrt(p*(1-p)/(n*ddexp(true)^2)) # standard deviation of quantiles
rbind(sim,true,diff,sd)
## acceptance-rejection for N(0,1) using t(2)
# computation and verification of suitable constant
c = 1/Gamma(3/2)*exp(-1/2)*(3/2)^3/2
omputation and verification of suitable constant
c = 1/gamma(3/2)*exp(-1/2)*(3/2)^3/2
vals = seq(-2,2,0.05)
f_over_g <- function(x) = 1/gamma(3/2)*exp(-x^2/2)*(1+x^2/2)^3/2
c = 1/gamma(3/2)*exp(-1/2)*(3/2)^3/2
vals = seq(-2,2,0.05)
f_over_g <- function(x) 1/gamma(3/2)*exp(-x^2/2)*(1+x^2/2)^3/2
plot(valse, f_over_g(vals))
c = 1/gamma(3/2)*exp(-1/2)*(3/2)^3/2
vals = seq(-2,2,0.05)
f_over_g <- function(x) 1/gamma(3/2)*exp(-x^2/2)*(1+x^2/2)^3/2
plot(vals, f_over_g(vals))
c = 1/gamma(3/2)*exp(-1/2)*(3/2)^3/2
vals = seq(-2,2,0.001)
f_over_g <- function(x) 1/gamma(3/2)*exp(-x^2/2)*(1+x^2/2)^3/2
plot(vals, f_over_g(vals))
vals = seq(-4,4,0.001)
plot(vals, f_over_g(vals))
c = 1/gamma(3/2)*exp(-1/2)*(3/2)^3/2
vals = seq(-4,4,0.001)
f_over_g <- function(x) 1/gamma(3/2)*exp(-x^2/2)*(1+x^2/2)^(3/2)
plot(vals, f_over_g(vals))
c = 1/gamma(3/2)*exp(-1/2)*(3/2)^3/2
vals = seq(-2,2,0.001)
plot(vals, dt/dnorm)
plot(vals, dt(vals)/dnorm(vals))
plot(vals, dt(vals, df = 2)/dnorm(vals))
plot(vals, dnorm(vals)/dt(vals, df = 2))
abline(h=c)
## acceptance-rejection for N(0,1) using t(2)
# computation and verification of suitable constant
c = 1/gamma(3/2)*exp(-1/2)*(3/2)^(3/2)
abline(h=c)
c = 1/gamma(3/2)*exp(-1/2)*(3/2)^(3/2)
vals = seq(-2,2,0.001)
plot(vals, dnorm(vals)/dt(vals, df = 2))
abline(h=c)
my_rnorm <- function(n) {
x = numeric(n)
acc = 0
while(acc < n) {
X = rt(1,df = 1)
Y = runif(1)
if(c*dt(X, df = 2)*Y <= dnorm(X)) {
acc = acc + 1
return(x)
}
}
}
my_rnorm(1000)
my_rnorm <- function(n) {
x = numeric(n)
acc = 0
while(acc < n) {
X = rt(1,df = 1)
Y = runif(1)
if(c*dt(X, df = 2)*Y <= dnorm(X)) {
acc = acc + 1
x[acc] = X
}
}
return(x)
}
my_rnorm(1000)
distribution(my_rnorm(1000))
density(my_rnorm(1000))
p = seq(.1,.9,.1)
sim = quantile(my_rnorm(1000))
true = quantile(rnorm(1000))
rbind(sim,true)
p = seq(.1,.9,.1)
sim = quantile(my_rnorm(100000))
true = quantile(rnorm(100000))
rbind(sim,true)
p = seq(.1,.9,.1)
sim = quantile(my_rnorm(1000))
true = qnorm(p)
rbind(sim,true)
true = qnorm(p)
true
sim
p = seq(.1,.9,.1)
sim = quantile(my_rnorm(1000))
qnorm(p)
# compare
p = seq(.1,.9,.1)
quantile(my_rnorm(1000))
qnorm(p)
p = seq(.1,.9,.1)
sim = quantile(my_rnorm(1000), p)
true = qnorm(p)
rbind(sim,true)
my_rnorm <- function(n) {
x = numeric(n)
acc = 0
total = 0
while(acc < n) {
total = total + 1
X = rt(1,df = 1)
Y = runif(1)
if(c*dt(X, df = 2)*Y <= dnorm(X)) {
acc = acc + 1
x[acc] = X
}
}
acc/total # acceptance rate
return(x)
}
my_rnorm(1000)
my_rnorm <- function(n) {
x = numeric(n)
acc = 0
total = 0
while(acc < n) {
total = total + 1
X = rt(1,df = 1)
Y = runif(1)
if(c*dt(X, df = 2)*Y <= dnorm(X)) {
acc = acc + 1
x[acc] = X
}
}
print(acc/total) # acceptance rate
return(x)
}
my_rnorm(1000)
1/c
my_rnorm(1000)
my_rnorm <- function(n) {
x = numeric(n)
acc = 0
total = 0
while(acc < n) {
total = total + 1
X = rt(1,df = 1)
Y = runif(1)
if(c*dt(X, df = 2)*Y <= dnorm(X)) {
acc = acc + 1
x[acc] = X
}
}
return(x)
}
# compare
p = seq(.1,.9,.1)
sim = quantile(my_rnorm(1000), p)
true = qnorm(p)
rbind(sim,true)
p = seq(0,1,.01)
sim = quantile(my_rnorm(1000), p)
true = qnorm(p)
plot(true,sim)
abline(a = 0, b = 1)
p = seq(0,1,.01)
sim = quantile(my_rnorm(10000), p)
true = qnorm(p)
plot(true,sim)
abline(a = 0, b = 1)
# compare
p = seq(0,1,.01)
sim = quantile(my_rnorm(1000), p)
true = qnorm(p)
plot(true,sim)
abline(a = 0, b = 1)
?rf
# compare
sim = quantile(my_rf(1000,1,3),p)
true = qf(p,1,3)
plot(sim,true)
# compare
sim = quantile(rf(1000,1,3),p)# quantile(my_rf(1000,1,3),p)
true = qf(p,1,3)
plot(sim,true)
# compare
sim = quantile(my_rf(1000,1,3),p)
true = qf(p,1,3)
plot(sim,true)
# compare
sim = quantile(my_rf(1000,1,3),p)
## transformation for F from chisq distribution
my_rf <- function(n,df1,df2) {
return(rchisq(n,df1)*df2/(rchisq(n,df2)*df1))
}
# compare
sim = quantile(my_rf(1000,1,3),p)
true = qf(p,1,3)
plot(sim,true)
# transformation for F from chisq distribution
my_rf <- function(n,df1,df2) {
return(rchisq(n,df1)*df2/(rchisq(n,df2)*df1))
}
# compare
sim = quantile(my_rf(1000,1,3),p)
true = qf(p,1,3)
plot(sim,true)
# compare
sim = quantile(my_rf(1000,10,10),p)
true = qf(p,1,3)
plot(sim,true)
# compare
sim = quantile(my_rf(1000,100,100),p)
true = qf(p,1,3)
plot(sim,true)
# compare
sim = quantile(my_rf(1000,1,3),p)
true = qf(p,1,3)
plot(sim,true)
# compare
sim = quantile(my_rf(1000,10,10),p)
true = qf(p,1,3)
plot(sim,true)
## transformation for F from chisq distribution
my_rf <- function(n,df1,df2) {
return(rchisq(n,df1)*df2/(rchisq(n,df2)*df1))
}
# compare
sim = quantile(my_rf(1000,10,10),p)
true = qf(p,1,3)
plot(sim,true)
## transformation for F from chisq distribution
my_rf <- function(n,df1,df2) {
return((rchisq(n,df1)/df1)/(rchisq(n,df2)/df2))
}
# compare
sim = quantile(my_rf(1000,10,10),p)
true = qf(p,1,3)
plot(sim,true)
## transformation for F from chisq distribution
my_rf <- function(n,df1,df2) {
return((rchisq(n,df1)/df1)/(rchisq(n,df2)/df2))
}
# compare
sim = quantile(my_rf(1000,100,100),p)
true = qf(p,1,3)
plot(sim,true)
## transformation for F from chisq distribution
my_rf <- function(n,df1,df2) {
return((rchisq(n,df1)/df1)/(rchisq(n,df2)/df2))
}
# compare
sim = quantile(my_rf(1000,100,100),p)
true = qf(p,100,100)
plot(sim,true)
# compare
sim = quantile(my_rf(1000,1,3),p)
true = qf(p,1,3)
plot(sim,true)
## t(4) distribution as Normal-(inverse)gamma mixture
rt4 <- function(n) {
# X ~ invgamma(4/2,4/2)
X = 1/rgamma(n, 4/2, 4/2)
return(rnorm(n, sd = sqrt(X)))
}
rt4(10)
sim = quantile(rt4(1000,1,3),p)
## t(4) distribution as Normal-(inverse)gamma mixture
rt4 <- function(n, df) {
# X ~ invgamma(df/2,df/2)
X = 1/rgamma(n, df/2, df/2)
return(rnorm(n, sd = sqrt(X)))
}
#compare
sim = quantile(rt4(1000),p)
## t(4) distribution as Normal-(inverse)gamma mixture
my_rt <- function(n, df) {
# X ~ invgamma(df/2,df/2)
X = 1/rgamma(n, df/2, df/2)
return(rnorm(n, sd = sqrt(X)))
}
#compare
sim = quantile(my_rt(1000, 4),p)
true = qt(p,4)
plot(sim,true)
IQR(1:5)
?rank
rank(c(3,1,2))
rank(c(21,-1234,2))
iris
prcomp(iris)
iris[-species]
iris[species]
iris.species
iris.species
## estimate integral of exp(-x) from 0 to 1
m = 100
mean(exp(-runif(m)))
1-exp(-1)
## estimate integral of exp(-x) from 0 to 1
m = 1000
mean(exp(-runif(m)))
1-exp(-1)
m = 1000
x = mean(exp(-runif(m)))
true = 1-exp(-1)
x-true
## estimate integral of exp(-x) from 0 to 1
m = 10000
x = mean(exp(-runif(m)))
true = 1-exp(-1)
x-true
## estimate integral of exp(-x) from 0 to 1
m = 10000
x = mean(exp(-runif(m)))
true = 1-exp(-1)
x-true
## estimate integral of exp(-x) from 0 to 1
m = 10000
x = mean(exp(-runif(m)))
true = 1-exp(-1)
x-true
## estimate integral of exp(-x) from 0 to 1
m = 10000
x = mean(exp(-runif(m)))
true = 1-exp(-1)
x-true
## estimate integral of exp(-x) from 0 to 1
m = 10000
x = mean(exp(-runif(m)))
true = 1-exp(-1)
x-true
## estimate integral of exp(-x) from 0 to 1
m = 1000
x = mean(exp(-runif(m)))
true = 1-exp(-1)
x-true
## estimate integral of exp(-x) from 0 to 1
m = 1000
x = mean(exp(-runif(m)))
true = 1-exp(-1)
print(x-true)
(1-0.004)/0.24
*100
(1-0.004)/0.24*100
(0.004)/0.24*100
(0.24-0.004)/0.24
matrix(0,2,3)
1-exp(-0.5)
m = 100
x1 = mean(exp(-runif(m,0,0.5)))
x2 = mean(rexp(m,rate = 1) >= .5)
x2
x1
x1 = mean(exp(-runif(m,0,0.5)))/2
x1
m = 100
x1 = mean(exp(-runif(m,0,0.5)))/2
x2 = mean(rexp(m,rate = 1) < .5)
x1
x2
var(apply(x, MARGIN = 2, FUN = var))
x = matrix(0,100,2)
for(i in 0:100) {
m = 100
x[i,1] = mean(exp(-runif(m,0,0.5)))/2
x[i,2] = mean(rexp(m,rate = 1) < .5)
}
var(apply(x, MARGIN = 2, FUN = var))
x
var(apply(x, MARGIN = 1, FUN = var))
var(x[1])
var(x[1])
var(x[2])
var(x[,1])
var(x[,2])
## monte carlo integration of e^-x on 0 to 0.5
x = matrix(0,100,3)
for(i in 0:100) {
m = 100
x[i,1] = mean(exp(-runif(m,0,0.5)))/2
x[i,2] = mean(rexp(m,rate = 1) < .5)
temp = runif(m/2,0,0.5)
x[i,3] = mean(c(exp(-temp),exp(temp-1)))/2
}
var(x[,1])
var(x[,2])
var(x[,3])
x[1,3]
x[1,10]
x[10,3]
x[1,1]
## monte carlo integration of e^-x on 0 to 0.5
x = matrix(0,100,3)
for(i in 0:100) {
m = 100
x[i,1] = mean(exp(-runif(m,0,0.5)))/2
x[i,2] = mean(rexp(m,rate = 1) < .5)
temp = runif(m/2,0,0.5)
x[i,3] = mean(c(exp(-temp),exp(temp-.5)))/2
}
var(x[,1])
var(x[,2])
var(x[,3])
x[1,2]
x[1,3]
